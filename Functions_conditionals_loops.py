# 2.1 Создать функцию calc(a, b, operation). Описание входных параметров:
#    1. Первое число
#    2. Второе число
#    3. Действие над ними:
#      1) + Сложить
#      2) - Вычесть
#      3) * Умножить
#      4) / Разделить
#      5) В остальных случаях функция должна возвращать "Операция не поддерживается"


def calc(a, b, operation):
    # Задаем дефолтное значение возвращаемого результата
    result = 'Операция не поддерживается'

    if operation == '+':
        result = a + b
    elif operation == '-':
        result = a - b
    elif operation == '*':
        result = a * b
    elif operation == '/':
        # Проверка деления на ноль
        if b is not 0:
            result = a / b
        else:
            result = 'Деление на 0!'

    # Возвращаем результат выполнения функции
    return result


if __name__ == '__main__':
    # Проверяем корректные значения
    print(calc(30, 15, '+'))
    print(calc(30, 15, '-'))
    print(calc(30, 15, '*'))
    print(calc(30, 15, '/'))
    # Проверяем проверку деления на ноль
    print(calc(30, 0, '/'))
    # Проверяем неподдерживаемую операцию
    print(calc(30, 15, '%'))



# 2.2 Напишите программу, которая будет выводить нечетные числа из списка и остановится, если встретит число 139


#  Функция, которая проверяет входной параметр на четность
def even(num):
    # Возвращаем True, если остаток от деления на 2 равен нулю
    return num % 2 == 0


if __name__ == '__main__':
    lst = [1, 34, 78, 345, 111, 8, 5, 34, 9, 3, 139, 56, 2, 67, 69, 90]

    # В цикле перебираем элементы вышесозданного списка
    for item in lst:
        # Если текущий элемент равен 139, то прерываем цикл
        if item == 139:
            break
        # Выводим элемент, если он не является четным
        if not even(item):
            print(item)


# 2.3 Создайте список [ 18, 14, 10, 6, 2 ]  с помощью функции range()

lst = []

# Пробегаемся циклом for по последовательности, которую формирует функция range()
# Начало диапазона: 18
# Конец диапазона: 1(обратите внимание, что 1 не включается в итоговую последовательность)
# Шаг: -4(обратный шаг - двигаемся в сторону уменьшения значений)
for item in range(18, 1, -4):
    lst.append(item)

print(lst)



# 2.4. Дан список lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]. 
# Необходимо вывести элементы, которые одновременно 1) меньше 30 и 2) делятся на 3 без остатка. 
# Все остальные элементы списка необходимо просуммировать и вывести конечный результат.


# Задаем константы для значений, заданных в условии
MEDIAN = 30
DIV_NUM = 3

# Создаем список
lst = [11, 5, 8, 32, 15, 3, 20, 132, 21, 4, 555, 9, 20]

# Задаем начальное значение переменной для суммы элементов
sm = 0

# Поочередно перебираем элементы списка
for item in lst:
    # Проверяем, что
    # 1) Текущий элемент меньше 30
    # 2) Остаток от деления текущего элемента на 3 равен 0
    if (item < MEDIAN) and (item % DIV_NUM == 0):
        print(item)
    # Добавляем элемент к сумме, если условие не выполнено
    else:
        sm += item

# Выводим конечную сумму
print('Sum: ', sm)


# 2.5 Написать функцию month_to_season(), которая принимает 1 аргумент - номер месяца - и возвращает название сезона, к которому относится этот месяц. 
#     Например, передаем 2, на выходе получаем 'Зима'.


# Имя функции: month_to_season
# Параметр: month
def month_to_season(month):

    # Создание словаря для хранения информации о сезонах
    # Ключ: кортеж(tuple) из номеров входящих в сезон месяцов
    # Значение: строка(str)-название сезона
    season_ranges = {
        (12, 1, 2): 'Winter',
        (3, 4, 5): 'Spring',
        (6, 7, 8): 'Summer',
        (9, 10, 11): 'Autumn'
    }
    # Создание переменной для возвращаемого значения функции
    season = None

    # Цикл, в котором по очереди перебираются пары ключ-значение(номера месяцев - сезон) из словаря
    for key, value in season_ranges.items():
        # Если значение входного параметра(номер месяца) входит в состав ключа(пример ключа - (3, 4, 5))
        if month in key:
            # То присваиваем возвращаемой переменной season название сезона
            season = value
            # Останавливаем цикл
            break
            
    # Возвращаем название сезона
    return season


# Проверяем работу функции
print(month_to_season(1))
print(month_to_season(5))
print(month_to_season(8))
print(month_to_season(9))
print(month_to_season(12))
print(month_to_season(999))
